//Создать форму
public static void main(String[] args) {
 GamePanel panel = new GamePanel();// создаём объект панель
 JFrame startFrame = new JFrame("game");// создаем окно с названием
 startFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// закрытие окна при клике крестика
 startFrame.setContentPane(panel); // перенос в фрейм панели с GamePanel
 //startFrame.add(panel);
 startFrame.setLocationRelativeTo(null);//полоение фрейма по центру
 startFrame.pack();//размер фрейма как и размер его компонентов

 panel.start();// заускаем поток панели
// окно видемо
 startFrame.setVisible(true);
 
 
 //Панель
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.*;


public class GamePanel extends JPanel implements Runnable {
 // задаём размер панели
 public static int WIDTH = 400;
 public static int HEIGHT = 400;


 private Thread thread; // Создаем поток- ссылка на обьект класса Thread
 private BufferedImage image; // ссылка на обьект класса
 private Graphics2D g; // ссылка на обьект класса
 public static GameBack background;// ссылка на обьект класса
 public static Player player;// ссылка на обьект класса
 public static ArrayList<Bullet> bullets;

 // конструктор
 public GamePanel() {
 super(); // активируем консруктор родителя
 setPreferredSize(new Dimension(WIDTH, HEIGHT)); // размер передаем в обьект класса Измерения

 setFocusable(true); //передаем фокус
 requestFocus(); // акивируем
 addKeyListener(new Listeners());// добавляем обработчик событий

 }

 // запуск потока
 public void start() {
 thread = new Thread((Runnable) this);
 thread.start();// запускаем поток
 }
 //метод от интерфейса Runnable (потока)
 @Override
 public void run() {
 image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
 g = (Graphics2D) image.getGraphics();
 g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);//сглаживание соседних пиксеей
 background = new GameBack();
 player = new Player();
 bullets = new ArrayList<Bullet>();
 while (true) { // игровой цикл
 gameUpdate(); //обновление
 gameRender(); //перерисовка
 gameDraw(); ////перенос изображения на панель
 // player.update();
 try {
 thread.sleep(33); //засыпаем на ... мс
 } catch (InterruptedException ex) { //если не удается заснуть- исключение
 ex.printStackTrace();
 }
 }
 }

 //обновление
 public void gameUpdate() { //обновление
 background.update();// вызов метода для заднего плана
 player.update();// обновление
 //bullets.update
 for(int i = 0; i<bullets.size(); i++){
 bullets.get(i).update();// обновлям текущую пулю
 boolean remove_p = bullets.get(i).remove_f();//текущую пулю проверяем где она
 if(remove_p){ // если правдиво(улетела)
 bullets.remove(i);//удаляем пулю которая вылетела
 i--;//
 }
 }
 }

 //рисуем задний план в виртуальном окне
 public void gameRender() { //перерисовка
 background.draw(g);// вызов метода для заднего плана
 player.draw(g);
 //перерисовка - вызов метода для bullet
 for (int i = 0; i < bullets.size(); i++) {
 bullets.get(i).draw(g);
 }
 }
 //перенос изображения на панель
 private void gameDraw() {
 Graphics g2 = this.getGraphics();// переоппред Graphics2d на Graphics
 g2.drawImage(image, 0, 0, null);// рисуем
 g2.dispose();// команда для уборщщика мусора

 }

}



//Игрок

import java.awt.*;

/**
 главный герой игры
 */
public class Player {

 private double x;//координа х героя
 private double y;
 private int r; // радиус героя
 private int speed;// скорось
 private Color color1;// цвет
 private Color color2;// цвет2

 // стаич прем - кавиши перемещения

 public static boolean up;
 public static boolean down;
 public static boolean left;
 public static boolean right;
 private double dx;// смещение
 private double dy;
 public static boolean isFiring;//стрельба

 // Constructor
 public Player(){
 x = GamePanel.WIDTH / 2;// нач координаты героя
 y = GamePanel.HEIGHT / 2;
 r = 5;
 speed = 5;
 color1 = Color.WHITE;
 // смещение
 dx = 0;
 dy = 0;
 // нач знач клавиш
 up = false;
 down = false;
 left = false;
 right = false;
 isFiring = false;
 }
 // гетеры
 public double getX(){
 return x;
 }
 public double getY(){
 return y;
 }
 // обновления
 public void update(){
 // смещение героя по игровому полю
 if (up && y >r){
 y -= speed;
 }
 if (down && y <GamePanel.HEIGHT -r){
 y += speed;
 }
 if (left && x >r){
 x -= speed;
 }
 if (right && x <GamePanel.WIDTH -r){
 x += speed;
 }
 if(up && left || up && right || down && left || down && right){
 dy = dy * Math.sin(Math.toRadians(45));
 dx = dx * Math.cos(Math.toRadians(45));
 }
 y += dy;
 x += dy;

 dy = 0;
 dx = 0;
 if (isFiring){ // если стрельба true
 GamePanel.bullets.add(new Bullet());
 }
 }

 // отрисовка героя
 public void draw(Graphics2D g){
 g.setColor(color1);
 g.fillOval((int) (x-r),(int) (y-r), 2*r,2*r);
 g.setStroke(new BasicStroke(3));
 g.setColor(color1.darker());
 g.drawOval((int) (x-r),(int) (y-r), 2*r,2*r);
 g.setStroke(new BasicStroke(1));
 }

}
