    //Получить хэш
    public String hashCode(String pas) {
        int iLength = pas.length();
        StringBuffer sb = new StringBuffer(iLength * 2);
        for (int i = 0; i < iLength; i++) {
            //Получить ASCII код символа
            int v = (int) pas.charAt(i);
            //Добавить в список шестнадцатеричное число
            sb.append(Integer.toHexString(v));
        }
        return sb.toString().toUpperCase();
    }
    
    //Читать файл
    public String readFile() {
        String sText = "";
        try {
            //Чтение файла
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String strLine = "";
            //Если файл существует
            if (fileInput.exists()) {
                //Пока не конец строки
                while ((strLine = br.readLine()) != null) {
                    sText += strLine;
                }
                br.close();
            } else {
                System.out.println("Файла не найден");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sText;
    }
    
     //Записывать файл
    public void writeFile(String sResultText) {
        String filePathResult = "code.txt";
        File fileOutput = new File(filePathResult);
        try {
            //Создать файл
            if (fileOutput.createNewFile()) {
                System.out.println(fileOutput + " Файл создан");
            } else {
                System.out.println("Файл " + fileOutput + " уже существует");
            }
            BufferedWriter writerText = new BufferedWriter(new FileWriter(filePathResult));
            writerText.write(sResultText);
            writerText.flush();
            writerText.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //Остановить поток
    lock = new Object();
    
    //Запустить поток
    Runnable pro1 = () -> {
            try {
                jLabel20.setText("Выполнение");
                for (int i = 0; i <= 100; i++) {
                //Нажить кнопку стоп
                    if (stopProc1 == true) {
                        synchronized (lock) {
                        //Отсновить поток
                            lock.wait();
                        }
                    }
                    sleep(250);
                    jLabel15.setText(String.valueOf(i + " %"));
                }
            } catch (InterruptedException e) {

            }
            jLabel20.setText("Завершен");
        };
    
    //Проверка
    if (stopProc1 == false) {
            stopProc1 = true;

        } else {
            stopProc1 = false;
            synchronized (lock1) {
            //Запусть поток заново
                lock1.notify();
            }
        }
    
    //Синхронизированные потоки
        public void startLab3() {
            lbl_cond.setText("Выполнение");
            SwingWorker swingWorker = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    for (int i = 0; i <= 100; i++) {
                        lbl_prec.setText(String.valueOf(i + " %"));
                        try {
                            Thread.sleep(all_time);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    lbl_cond.setText("Завершен");
                    return null;
                }
            };
            completed = true;
            swingWorker.execute();
        }
